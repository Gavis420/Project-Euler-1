/*
* Gavin Sommers 11/13/24
* Each new term in the Fibonacci sequence is generated by adding the previous two terms.
* By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.
* By considering the terms in the Fibonacci sequence whose values do not exceed
* four million, find the sum of the even-valued terms. 
*/

#include <iostream>
#include <cmath>

// calculates a number n in the fibonacci sequence
int fibonacci(int n) {
    const double sqrt5 = std::sqrt(5);
    const double phi = (1 + sqrt5) / 2;
    const double psi = (1 - sqrt5) / 2;

    return static_cast<unsigned long long>(std::round((std::pow(phi, n) - std::pow(psi, n)) / sqrt5));
}

// keeps track of what number in the sequence we're at, calls fibonacci every 3 to get the even numbers
void functionA(int &total) {
    int fib = 0;

    while (total < 4000000) {
        total += fibonacci(fib);
        fib += 3; //every third number in the sequence is an even number
    }
}

// Main Function
int main() {
    int total = 0;

    // using first approach function A
    functionA(total);

    std::cout << "\nThe sum of fibonacci up to 4000000 is " << total << ".\n\n";

    return 0;
}